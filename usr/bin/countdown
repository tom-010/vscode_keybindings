#!/usr/bin/python3

from email import charset
from time import sleep
import os
import argparse
import re
import datetime




mode = 'small'
headline = 'countdown'
n_countdowns = 1

def main():
    start = datetime.datetime.now()
    durations = get_durations()
    n_countdowns = len(durations)
    
    for current_countdown, remaining in enumerate(durations):
        if n_countdowns > 1:
            global headline
            headline = f'countdown {current_countdown+1}/{n_countdowns}'
        while remaining > 0:
            print_seconds(remaining)
            if remaining <= 3 and remaining > 0:
                beep()
            try:
                sleep(1.0-(datetime.datetime.now()-start).microseconds / 1000000)
                start = datetime.datetime.now()
            except KeyboardInterrupt:
                print_seconds(remaining, end='\n')
                exit(0)
            remaining -= 1
        print_seconds(remaining, end='\n')
        beep(1000)
    

def print_seconds(seconds, prefix=' ', end='\r'):
    if mode == 'big':
        os.system('clear')
        print(to_ascii(seconds_to_label(seconds)))
        print(headline)
    else:
        print('                                      ', end='\r')
        print(prefix+headline+': ' +seconds_to_label(seconds), end=end)


def get_durations():
    parser = argparse.ArgumentParser(description='Countdown')
    parser.add_argument('durations', nargs='+', type=str, help='time to coundown from. e.g. `10` is 10 seconds, `1:10` is one minute, 10 seconds, `2:1:10` is two hours one minute, 10 seconds')
    parser.add_argument('-b', '--big', action='store_true', help='Show the time in big font')
    args = parser.parse_args()
    if args.big:
        global mode
        mode = 'big'
    def clean_part(p):
        p = re.sub('[^0-9]','', p) # deltee all non-numeric stuff
        return int(p)

    def time_to_seconds(time):
        parts = [clean_part(p) for p in time.split(':')]
        if len(parts) == 1:
            return parts[0]
        if len(parts) == 2:
            return parts[0] * 60 + parts[1]
        if len(parts) == 3:
            return parts[0] * 60*60 + parts[1] * 60 + parts[0]
        print('could not parse time')
        exit(1)
    return [time_to_seconds(t) for t in args.durations]

def seconds_to_label(s):
    if s < 60:
        seconds = str(s).zfill(2)
        return f'{seconds} s'
    elif s < 60*60:
        minutes = str(s//60).zfill(2)
        seconds = str(s%60).zfill(2)
        return f'{minutes}:{seconds} m'
    else:
        h = s//(60*60)
        hours = str(h).zfill(2)
        minutes = str((s%3600) // 60).zfill(2)
        seconds = str(s%60).zfill(2)
        return f'{hours}:{minutes}:{seconds} h'

def beep(ms=100):
    os.system(f'beep -l {ms} &') # sudo apt install sox && sudo modprobe -v pcspkr



ascii_art = {
    '0':            
'     000000000     \n'+
'   00:::::::::00   \n'+
' 00:::::::::::::00 \n'+
'0:::::::000:::::::0\n'+
'0::::::0   0::::::0\n'+
'0:::::0     0:::::0\n'+
'0:::::0     0:::::0\n'+
'0:::::0 000 0:::::0\n'+
'0:::::0 000 0:::::0\n'+
'0:::::0     0:::::0\n'+
'0:::::0     0:::::0\n'+
'0::::::0   0::::::0\n'+
'0:::::::000:::::::0\n'+
' 00:::::::::::::00 \n'+
'   00:::::::::00   \n'+
'     000000000     \n',
'1':
'      1111111      \n'+
'     1::::::1      \n'+
'    1:::::::1      \n'+
'    111:::::1      \n'+
'       1::::1      \n'+
'       1::::1      \n'+
'       1::::1      \n'+
'       1::::l      \n'+
'       1::::l      \n'+
'       1::::l      \n'+
'       1::::l      \n'+
'       1::::l      \n'+
'    111::::::111   \n'+
'    1::::::::::1   \n'+
'    1::::::::::1   \n'+
'    111111111111   \n',
'2':
' 22222222222222    \n'+
'2::::::::::::::22  \n'+
'2::::::22222:::::2 \n'+
'2222222     2:::::2\n'+
'            2:::::2\n'+
'            2:::::2\n'+
'         222::::2  \n'+
'    22222:::::22   \n'+
'  22:::::::222     \n'+
' 2:::::2222        \n'+
'2:::::2            \n'+
'2:::::2            \n'+
'2:::::2      222222\n'+
'2::::::222222:::::2\n'+
'2:::::::::::::::::2\n'+
'2222222222222222222\n',
'3':
' 333333333333333   \n'+
'3:::::::::::::::33 \n'+
'3::::::33333::::::3\n'+
'3333333     3:::::3\n'+
'            3:::::3\n'+
'            3:::::3\n'+
'    33333333:::::3 \n'+
'    3:::::::::::3  \n'+
'    33333333:::::3 \n'+
'            3:::::3\n'+
'            3:::::3\n'+
'            3:::::3\n'+
'3333333     3:::::3\n'+
'3::::::33333::::::3\n'+
'3:::::::::::::::33 \n'+
' 333333333333333   \n',
'4':
'       444444444   \n'+
'      4::::::::4   \n'+
'     4:::::::::4   \n'+
'    4::::44::::4   \n'+
'   4::::4 4::::4   \n'+
'  4::::4  4::::4   \n'+
' 4::::4   4::::4   \n'+
'4::::444444::::444 \n'+
'4::::::::::::::::4 \n'+
'4444444444:::::444 \n'+
'          4::::4   \n'+
'          4::::4   \n'+
'          4::::4   \n'+
'        44::::::44 \n'+
'        4::::::::4 \n'+
'        4444444444 \n',
'5':
'555555555555555555 \n'+
'5::::::::::::::::5 \n'+
'5::::::::::::::::5 \n'+
'5:::::555555555555 \n'+
'5:::::5            \n'+
'5:::::5            \n'+
'5:::::5555555555   \n'+
'5:::::::::::::::5  \n'+
'555555555555:::::5 \n'+
'            5:::::5\n'+
'            5:::::5\n'+
'5555555     5:::::5\n'+
'5::::::55555::::::5\n'+
' 55:::::::::::::55 \n'+
'   55:::::::::55   \n'+
'     555555555     \n',
'6':
'        66666666   \n'+
'       6::::::6    \n'+
'      6::::::6     \n'+
'     6::::::6      \n'+
'    6::::::6       \n'+
'   6::::::6        \n'+
'  6::::::6         \n'+
' 6::::::::66666    \n'+
'6::::::::::::::66  \n'+
'6::::::66666:::::6 \n'+
'6:::::6     6:::::6\n'+
'6:::::6     6:::::6\n'+
'6::::::66666::::::6\n'+
' 66:::::::::::::66 \n'+
'   66:::::::::66   \n'+
'     666666666     \n',
'7':
'7777777777777777777\n'+
'7:::::::::::::::::7\n'+
'7:::::::::::::::::7\n'+
'777777777777::::::7\n'+
'           7::::::7\n'+
'          7::::::7 \n'+
'         7::::::7  \n'+
'        7::::::7   \n'+
'       7::::::7    \n'+
'      7::::::7     \n'+
'     7::::::7      \n'+
'    7::::::7       \n'+
'   7::::::7        \n'+
'  7::::::7         \n'+
' 7::::::7          \n'+
'77777777           \n',
'8':
'     888888888     \n'+
'   88:::::::::88   \n'+
' 88:::::::::::::88 \n'+
'8::::::88888::::::8\n'+
'8:::::8     8:::::8\n'+
'8:::::8     8:::::8\n'+
' 8:::::88888:::::8 \n'+
'  8:::::::::::::8  \n'+
' 8:::::88888:::::8 \n'+
'8:::::8     8:::::8\n'+
'8:::::8     8:::::8\n'+
'8:::::8     8:::::8\n'+
'8::::::88888::::::8\n'+
' 88:::::::::::::88 \n'+
'   88:::::::::88   \n'+
'     888888888     \n',
'9':
'     999999999     \n'+
'   99:::::::::99   \n'+
' 99:::::::::::::99 \n'+
'9::::::99999::::::9\n'+
'9:::::9     9:::::9\n'+
'9:::::9     9:::::9\n'+
' 9:::::99999::::::9\n'+
'  99::::::::::::::9\n'+
'    99999::::::::9 \n'+
'         9::::::9  \n'+
'        9::::::9   \n'+
'       9::::::9    \n'+
'      9::::::9     \n'+
'     9::::::9      \n'+
'    9::::::9       \n'+
'   99999999        \n',
'm':
'                        \n'+
'                        \n'+
'                        \n'+
'                        \n'+
'   mmmmmmm    mmmmmmm   \n'+
' mm:::::::m  m:::::::mm \n'+
'm::::::::::mm::::::::::m\n'+
'm::::::::::::::::::::::m\n'+
'm:::::mmm::::::mmm:::::m\n'+
'm::::m   m::::m   m::::m\n'+
'm::::m   m::::m   m::::m\n'+
'm::::m   m::::m   m::::m\n'+
'm::::m   m::::m   m::::m\n'+
'm::::m   m::::m   m::::m\n'+
'm::::m   m::::m   m::::m\n'+
'mmmmmm   mmmmmm   mmmmmm\n',
's':
'                 \n'+
'                 \n'+
'                 \n'+
'                 \n'+
'    ssssssssss   \n'+
'  ss::::::::::s  \n'+
'ss:::::::::::::s \n'+
's::::::ssss:::::s\n'+
' s:::::s  ssssss \n'+
'   s::::::s      \n'+
'      s::::::s   \n'+
'ssssss   s:::::s \n'+
's:::::ssss::::::s\n'+
's::::::::::::::s \n'+
' s:::::::::::ss  \n'+
'  sssssssssss    \n',
'h':
'hhhhhhh             \n'+
'h:::::h             \n'+
'h:::::h             \n'+
'h:::::h             \n'+
' h::::h hhhhh       \n'+
' h::::hh:::::hhh    \n'+
' h::::::::::::::hh  \n'+
' h:::::::hhh::::::h \n'+
' h::::::h   h::::::h\n'+
' h:::::h     h:::::h\n'+
' h:::::h     h:::::h\n'+
' h:::::h     h:::::h\n'+
' h:::::h     h:::::h\n'+
' h:::::h     h:::::h\n'+
' h:::::h     h:::::h\n'+
' hhhhhhh     hhhhhhh\n',
':':     
'            \n'+
'            \n'+
'            \n'+
'            \n'+
'            \n'+
'            \n'+
'            \n'+
'   ######   \n'+
'   ######   \n'+
'   ######   \n'+
'            \n'+
'            \n'+
'            \n'+
'   ######   \n'+
'   ######   \n'+
'   ######   \n',
' ':
'        \n'+
'        \n'+
'        \n'+
'        \n'+
'        \n'+
'        \n'+
'        \n'+
'        \n'+
'        \n'+
'        \n'+
'        \n'+
'        \n'+
'        \n'+
'        \n'+
'        \n'+
'        \n'
}

def to_ascii(s):
    chars = []
    for c in s:
        chars.append(ascii_art[c].split('\n'))
    height = max([len(c) for c in chars])
    #chars = [ ([' ' * len(c[0])] * (height-len(c))) + c for c in chars ]
    res = [''] * height

    for line in range(height):
        for char in chars:
            res[line] += ' ' + char[line]

    return '\n'.join(res)

main()
